{"ast":null,"code":"import { takeLatest, call, put, all } from \"@redux-saga/core/effects\";\nimport ShopActionTypes from \"./shop.types\";\nimport { convertCollectionsSnapshotToMap, firestore } from \"../../firebase/firebase.util\";\nimport { fetchCollectionsFailure, fetchCollectionsSuccess } from \"./shop.actions\";\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get(); // comes back in promise form\n\n    const collections = yield call(convertCollectionsSnapshotToMap, snapshot); //call just invokes a function (arg. 1), with params (arg 2)\n\n    yield put(fetchCollectionsSuccess(collections)); // how you dispatch the action in saga\n  } catch (error) {\n    // to get error from collections\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}","map":{"version":3,"sources":["/Users/joyenettles/Documents/code/react/crwn-clothing/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","all","ShopActionTypes","convertCollectionsSnapshotToMap","firestore","fetchCollectionsFailure","fetchCollectionsSuccess","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collections","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,QAAyC,0BAAzC;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAAQC,+BAAR,EAAyCC,SAAzC,QAAyD,8BAAzD;AACA,SAAQC,uBAAR,EAAiCC,uBAAjC,QAA+D,gBAA/D;AAEA,OAAO,UAAUC,qBAAV,GAAmC;AACtC,MAAI;AACA,UAAMC,aAAa,GAAGJ,SAAS,CAACK,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB,CAFA,CAE4C;;AAC5C,UAAMC,WAAW,GAAG,MAAMb,IAAI,CAACI,+BAAD,EAAkCO,QAAlC,CAA9B,CAHA,CAG2E;;AAC3E,UAAMV,GAAG,CAACM,uBAAuB,CAACM,WAAD,CAAxB,CAAT,CAJA,CAIiD;AACpD,GALD,CAKE,OAAOC,KAAP,EAAc;AAAE;AACd,UAAMb,GAAG,CAACK,uBAAuB,CAACQ,KAAK,CAACC,OAAP,CAAxB,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMjB,UAAU,CAACI,eAAe,CAACc,uBAAjB,EAA0CT,qBAA1C,CAAhB;AACH;AAED,OAAO,UAAUU,SAAV,GAAqB;AACxB,QAAMhB,GAAG,CAAC,CAACF,IAAI,CAACgB,qBAAD,CAAL,CAAD,CAAT;AACH","sourcesContent":["import {takeLatest, call, put, all} from \"@redux-saga/core/effects\";\nimport ShopActionTypes from \"./shop.types\";\nimport {convertCollectionsSnapshotToMap, firestore} from \"../../firebase/firebase.util\";\nimport {fetchCollectionsFailure, fetchCollectionsSuccess} from \"./shop.actions\";\n\nexport function* fetchCollectionsAsync()  {\n    try {\n        const collectionRef = firestore.collection('collections');\n        const snapshot = yield collectionRef.get(); // comes back in promise form\n        const collections = yield call(convertCollectionsSnapshotToMap, snapshot); //call just invokes a function (arg. 1), with params (arg 2)\n        yield put(fetchCollectionsSuccess(collections)); // how you dispatch the action in saga\n    } catch (error) { // to get error from collections\n        yield put(fetchCollectionsFailure(error.message))\n    }\n}\n\nexport function* fetchCollectionsStart() {\n    yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync )\n}\n\nexport function* shopSagas(){\n    yield all([call(fetchCollectionsStart)])\n}\n"]},"metadata":{},"sourceType":"module"}